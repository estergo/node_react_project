{"version":3,"file":"index.umd.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isEmptyString.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/isSameError.ts","../src/utils/compareObject.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/logic/mapIds.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/useFieldArray.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/utils/isSelectInput.ts","../src/logic/attachEventListeners.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","export default (value: string) => value === '';\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport isEmptyString from '../utils/isEmptyString';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || isEmptyString(value)\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return field ? getRadioValue(field.options).value : '';\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return field ? getCheckboxValue(field.options).value : false;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return index == length ? object : undefined;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        unmountFieldsStateRef,\n      );\n    }\n  }\n\n  return output;\n};\n","import isObject from './isObject';\nimport compareObject from './compareObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  compareObject(error.types, types);\n","export default (objectA: any = {}, objectB: any = {}) => {\n  const objectAKeys = Object.keys(objectA);\n\n  return (\n    objectAKeys.length === Object.keys(objectB).length &&\n    objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key])\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isEmptyString from '../utils/isEmptyString';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? (fields[name] as Field).options?.[0].ref : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport { FieldValues, InternalFieldName } from '../types/form';\nimport isArray from './isArray';\n\nconst getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values)\n    ? values.map((value, key) => getInnerPath(value, key))\n    : Object.entries(values).map(([key, value]) =>\n        getInnerPath(value, key, true),\n      );\n};\n\nexport default <TFieldValues extends FieldValues = FieldValues>(\n  parentPath: InternalFieldName<TFieldValues>,\n  value: TFieldValues,\n) => getPath(parentPath, value).flat(Infinity);\n","import transformToNestObject from './transformToNestObject';\nimport get from '../utils/get';\nimport getPath from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath<TFieldValues>(fieldName, value).forEach((name: string) =>\n        watchFields.add(name),\n      );\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnChange,\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted,\n}: {\n  hasError: boolean;\n  isOnChange: boolean;\n  isBlurEvent?: boolean;\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isReValidateOnSubmit: boolean;\n  isReValidateOnBlur: boolean;\n  isSubmitted: boolean;\n}) =>\n  (isOnChange && isBlurEvent) ||\n  (isOnSubmit && isReValidateOnSubmit) ||\n  (isOnSubmit && !isSubmitted) ||\n  (isOnBlur && !isBlurEvent && !hasError) ||\n  (isReValidateOnBlur && !isBlurEvent && hasError) ||\n  (isReValidateOnSubmit && isSubmitted);\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const { isOnBlur, isOnSubmit, isOnChange, isOnAll } = React.useRef(\n    modeChecker(mode),\n  ).current;\n  const validateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [reRender],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref)) {\n        if (isString(value)) {\n          ref.value = value;\n        } else {\n          ref.files = value as FileList;\n        }\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          validateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, validateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        validateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [reRender, shouldRenderBaseOnError, validateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation, reRender],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      config: SetValueConfig,\n      parentFieldName?: string,\n    ) => {\n      for (const key in value) {\n        const fieldName = `${parentFieldName || name}${\n          isArray(value) ? `[${key}]` : `.${key}`\n        }`;\n        const field = fieldsRef.current[fieldName];\n\n        if (isObject(value[key])) {\n          setInternalValues(name, value[key], config, fieldName);\n        }\n\n        if (field) {\n          setFieldValue(field, value[key]);\n\n          if (config.shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (config.shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      }\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n        return true;\n      }\n\n      unmountFieldsStateRef.current[name] = value;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          !watchFieldsHookRef.current[key].size ||\n          isNameInFieldArray(fieldArrayNamesRef.current, name)\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = target ? (target as Ref).name : '';\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (!field) {\n          return;\n        }\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const shouldSkipValidation =\n          !isOnAll &&\n          skipValidation({\n            hasError: !!get(errorsRef.current, name),\n            isOnChange,\n            isBlurEvent,\n            isOnSubmit,\n            isReValidateOnSubmit,\n            isOnBlur,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n          });\n        let shouldRender = setDirty(name) || isFieldWatched(name);\n\n        if (\n          isBlurEvent &&\n          !get(touchedFieldsRef.current, name) &&\n          readFormStateRef.current.touched\n        ) {\n          set(touchedFieldsRef.current, name, true);\n          shouldRender = true;\n        }\n\n        if (shouldSkipValidation) {\n          renderWatchedInputs(name);\n          return shouldRender && reRender();\n        }\n\n        if (resolver) {\n          const { errors } = await resolver(\n            getValues() as TFieldValues,\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          const previousFormIsValid = isValidRef.current;\n          isValidRef.current = isEmptyObject(errors);\n\n          error = (get(errors, name)\n            ? { [name]: get(errors, name) }\n            : {}) as FlatFieldErrors<TFieldValues>;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            shouldRender = true;\n          }\n        } else {\n          error = await validateField<TFieldValues>(\n            fieldsRef,\n            validateAllFieldCriteria,\n            field,\n            unmountFieldsStateRef,\n          );\n        }\n\n        renderWatchedInputs(name);\n\n        if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n          reRender();\n        }\n      };\n\n  const getValue = <TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue => getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getValue(payload);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getValue(name),\n        }),\n        {},\n      );\n    }\n\n    return transformToNestObject(\n      getFieldsValues(fieldsRef, unmountFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    (values = {}) => {\n      resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        validateAllFieldCriteria,\n      ).then(({ errors }) => {\n        const previousFormIsValid = isValidRef.current;\n        isValidRef.current = isEmptyObject(errors);\n\n        if (previousFormIsValid !== isValidRef.current) {\n          reRender();\n        }\n      });\n    },\n    [reRender, validateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n    },\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n          [\n            fieldsWithValidationRef,\n            validFieldsRef,\n            watchFieldsRef,\n          ].forEach((data) => data.current.delete(field.ref.name));\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [reRender, validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldsRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          validateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? getFieldValue(fieldsRef, name, unmountFieldsStateRef)\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners({\n        field:\n          isRadioOrCheckbox && field.options\n            ? field.options[field.options.length - 1]\n            : field,\n        isRadioOrCheckbox:\n          isRadioOrCheckbox || isSelectInput(ref as FieldElement),\n        handleChange: handleChangeRef.current,\n      });\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldsRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldsRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldsRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = {\n        ...unmountFieldsStateRef.current,\n        ...getValues(),\n      };\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                validateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError && isWeb) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [reRender, shouldFocusError, validateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    fieldsRef.current = {};\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nexport const FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isArray from '../utils/isArray';\nimport isObject from '../utils/isObject';\nimport generateId from './generateId';\nimport { ArrayField } from '../types/form';\n\nexport const appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nexport const mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): T[] =>\n  isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | null)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(data: T[], value?: T | T[]): (T | null)[] {\n  return [...(isArray(value) ? value : [value || null]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | null)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | null)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || null]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): null[] | null =>\n  isArray(value) ? Array(value.length).fill(null) : null;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport isBoolean from './utils/isBoolean';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    trigger,\n    mode: { isOnSubmit, isOnBlur, isOnChange },\n    reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n    formState,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const isCheckboxInput = isBoolean(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  const shouldValidate = () =>\n    !skipValidation({\n      hasError: !!get(errorsRef.current, name),\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n      isSubmitted,\n    });\n\n  const commonTask = (event: any[]) => {\n    const data = getInputValue(event[0], isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (isOnBlur || (formState.isSubmitted && isReValidateOnBlur)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    ...{ [isCheckboxInput ? 'checked' : VALUE]: value },\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any, isCheckboxInput: boolean) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isCheckboxInput || isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport { appendId, mapIds } from './logic/mapIds';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport isKey from './utils/isKey';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...get(\n      fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\n        ? fieldArrayDefaultValues.current\n        : defaultValuesRef.current,\n      name,\n      [],\n    ),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = React.useState(false);\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const isNameKey = isKey(name);\n\n  const getCurrentFieldsValues = () =>\n    watchFieldsRef.current.has(name)\n      ? get(getValues(), name).map(\n          (item: Partial<TFieldArrayValues>, index: number) => ({\n            ...allFields.current[index],\n            ...item,\n          }),\n        )\n      : allFields.current;\n\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | null)[],\n  ) => {\n    if (readFormStateRef.current.isDirty) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields,\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (readFormStateRef.current.dirtyFields) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = prependAt(\n        get(errorsRef.current, name),\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    setFieldAndValidState(removeArrayAt(getCurrentFieldsValues(), index));\n    resetFields(removeArrayAt(get(getValues(), name), index));\n    setIsDeleted(true);\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = removeArrayAt(\n        get(errorsRef.current, name),\n        index,\n      );\n      if (!unique(errorsRef.current[name]).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      insertAt(\n        getCurrentFieldsValues(),\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(get(getValues(), name), index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = insertAt(\n        get(errorsRef.current, name),\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState(fieldValues);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState(fieldValues);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (\n      isNameKey &&\n      isDeleted &&\n      fieldArrayDefaultValues.current[name] &&\n      fields.length < fieldArrayDefaultValues.current[name].length\n    ) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          break;\n        }\n      }\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    isDeleted,\n    isNameKey,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners({\n  field: { ref },\n  handleChange,\n  isRadioOrCheckbox,\n}: {\n  field: Field;\n  isRadioOrCheckbox: boolean;\n  handleChange?: EventListenerOrEventListenerObject;\n}): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\n  control?: Control;\n}): UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","[object Object]","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","defaultResult","validResult","values","map","attributes","isEmptyString","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","isString","startsWith","find","error","types","message","objectA","objectB","objectAKeys","every","compareObject","RegExp","validationData","isValueMessage","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","getPath","getInnerPath","pathWithIndex","isPrimitive","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","transformToNestObject","parentPath","flat","Infinity","forEach","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","substring","indexOf","getIsFieldsDifferent","referenceArray","differenceArray","i","dataA","dataB","isMatchFieldArrayName","searchName","names","some","mode","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","appendId","keyName","generateId","mapIds","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","errorsRef","trigger","reValidateMode","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","formState","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","isCheckboxInput","onFocusRef","commonTask","event","target","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","shouldValidate","skipValidation","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getValues","shouldRender","getDefaultValues","getFieldArrayParentName","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","getCurrentFieldsValues","has","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","pop","watchField","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","insertAt","resolver","context","defaultValues","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeChecker","submitCount","isSubmitting","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","config","parentFieldName","setInternalValue","isFieldWatched","found","size","shouldSkipValidation","getValue","getFieldsValues","validateResolver","then","forceDelete","handleChange","mutationWatcher","fieldRef","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldsRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","onDomRemove","isEmptyUnmountFields","addEventListener","attachEventListeners","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","nameRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}