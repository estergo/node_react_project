{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isEmptyString.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/isSameError.ts","../src/utils/compareObject.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/isSelectInput.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/logic/mapIds.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/useFieldArray.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","export default (value: string) => value === '';\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport isEmptyString from '../utils/isEmptyString';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || isEmptyString(value)\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return field ? getRadioValue(field.options).value : '';\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return field ? getCheckboxValue(field.options).value : false;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return index == length ? object : undefined;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        unmountFieldsStateRef,\n      );\n    }\n  }\n\n  return output;\n};\n","import isObject from './isObject';\nimport compareObject from './compareObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  compareObject(error.types, types);\n","export default (objectA: any = {}, objectB: any = {}) => {\n  const objectAKeys = Object.keys(objectA);\n\n  return (\n    objectAKeys.length === Object.keys(objectB).length &&\n    objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key])\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isEmptyString from '../utils/isEmptyString';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? (fields[name] as Field).options?.[0].ref : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport { FieldValues, InternalFieldName } from '../types/form';\nimport isArray from './isArray';\n\nconst getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values)\n    ? values.map((value, key) => getInnerPath(value, key))\n    : Object.entries(values).map(([key, value]) =>\n        getInnerPath(value, key, true),\n      );\n};\n\nexport default <TFieldValues extends FieldValues = FieldValues>(\n  parentPath: InternalFieldName<TFieldValues>,\n  value: TFieldValues,\n) => getPath(parentPath, value).flat(Infinity);\n","import transformToNestObject from './transformToNestObject';\nimport get from '../utils/get';\nimport getPath from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath<TFieldValues>(fieldName, value).forEach((name: string) =>\n        watchFields.add(name),\n      );\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnChange,\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted,\n}: {\n  hasError: boolean;\n  isOnChange: boolean;\n  isBlurEvent?: boolean;\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isReValidateOnSubmit: boolean;\n  isReValidateOnBlur: boolean;\n  isSubmitted: boolean;\n}) =>\n  (isOnChange && isBlurEvent) ||\n  (isOnSubmit && isReValidateOnSubmit) ||\n  (isOnSubmit && !isSubmitted) ||\n  (isOnBlur && !isBlurEvent && !hasError) ||\n  (isReValidateOnBlur && !isBlurEvent && hasError) ||\n  (isReValidateOnSubmit && isSubmitted);\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const { isOnBlur, isOnSubmit, isOnChange, isOnAll } = React.useRef(\n    modeChecker(mode),\n  ).current;\n  const validateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [reRender],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref)) {\n        if (isString(value)) {\n          ref.value = value;\n        } else {\n          ref.files = value as FileList;\n        }\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          validateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, validateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        validateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [reRender, shouldRenderBaseOnError, validateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation, reRender],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      config: SetValueConfig,\n      parentFieldName?: string,\n    ) => {\n      for (const key in value) {\n        const fieldName = `${parentFieldName || name}${\n          isArray(value) ? `[${key}]` : `.${key}`\n        }`;\n        const field = fieldsRef.current[fieldName];\n\n        if (isObject(value[key])) {\n          setInternalValues(name, value[key], config, fieldName);\n        }\n\n        if (field) {\n          setFieldValue(field, value[key]);\n\n          if (config.shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (config.shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      }\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n        return true;\n      }\n\n      unmountFieldsStateRef.current[name] = value;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          !watchFieldsHookRef.current[key].size ||\n          isNameInFieldArray(fieldArrayNamesRef.current, name)\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = target ? (target as Ref).name : '';\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (!field) {\n          return;\n        }\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const shouldSkipValidation =\n          !isOnAll &&\n          skipValidation({\n            hasError: !!get(errorsRef.current, name),\n            isOnChange,\n            isBlurEvent,\n            isOnSubmit,\n            isReValidateOnSubmit,\n            isOnBlur,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n          });\n        let shouldRender = setDirty(name) || isFieldWatched(name);\n\n        if (\n          isBlurEvent &&\n          !get(touchedFieldsRef.current, name) &&\n          readFormStateRef.current.touched\n        ) {\n          set(touchedFieldsRef.current, name, true);\n          shouldRender = true;\n        }\n\n        if (shouldSkipValidation) {\n          renderWatchedInputs(name);\n          return shouldRender && reRender();\n        }\n\n        if (resolver) {\n          const { errors } = await resolver(\n            getValues() as TFieldValues,\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          const previousFormIsValid = isValidRef.current;\n          isValidRef.current = isEmptyObject(errors);\n\n          error = (get(errors, name)\n            ? { [name]: get(errors, name) }\n            : {}) as FlatFieldErrors<TFieldValues>;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            shouldRender = true;\n          }\n        } else {\n          error = await validateField<TFieldValues>(\n            fieldsRef,\n            validateAllFieldCriteria,\n            field,\n            unmountFieldsStateRef,\n          );\n        }\n\n        renderWatchedInputs(name);\n\n        if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n          reRender();\n        }\n      };\n\n  const getValue = <TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue => getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getValue(payload);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getValue(name),\n        }),\n        {},\n      );\n    }\n\n    return transformToNestObject(\n      getFieldsValues(fieldsRef, unmountFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    (values = {}) => {\n      resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        validateAllFieldCriteria,\n      ).then(({ errors }) => {\n        const previousFormIsValid = isValidRef.current;\n        isValidRef.current = isEmptyObject(errors);\n\n        if (previousFormIsValid !== isValidRef.current) {\n          reRender();\n        }\n      });\n    },\n    [reRender, validateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n    },\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n          [\n            fieldsWithValidationRef,\n            validFieldsRef,\n            watchFieldsRef,\n          ].forEach((data) => data.current.delete(field.ref.name));\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [reRender, validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldsRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          validateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? getFieldValue(fieldsRef, name, unmountFieldsStateRef)\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners({\n        field:\n          isRadioOrCheckbox && field.options\n            ? field.options[field.options.length - 1]\n            : field,\n        isRadioOrCheckbox:\n          isRadioOrCheckbox || isSelectInput(ref as FieldElement),\n        handleChange: handleChangeRef.current,\n      });\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldsRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldsRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldsRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = {\n        ...unmountFieldsStateRef.current,\n        ...getValues(),\n      };\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                validateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError && isWeb) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [reRender, shouldFocusError, validateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    fieldsRef.current = {};\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nexport const FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isArray from '../utils/isArray';\nimport isObject from '../utils/isObject';\nimport generateId from './generateId';\nimport { ArrayField } from '../types/form';\n\nexport const appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nexport const mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): T[] =>\n  isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | null)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(data: T[], value?: T | T[]): (T | null)[] {\n  return [...(isArray(value) ? value : [value || null]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | null)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | null)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || null]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): null[] | null =>\n  isArray(value) ? Array(value.length).fill(null) : null;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport isBoolean from './utils/isBoolean';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    trigger,\n    mode: { isOnSubmit, isOnBlur, isOnChange },\n    reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n    formState,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const isCheckboxInput = isBoolean(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  const shouldValidate = () =>\n    !skipValidation({\n      hasError: !!get(errorsRef.current, name),\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n      isSubmitted,\n    });\n\n  const commonTask = (event: any[]) => {\n    const data = getInputValue(event[0], isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (isOnBlur || (formState.isSubmitted && isReValidateOnBlur)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    ...{ [isCheckboxInput ? 'checked' : VALUE]: value },\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any, isCheckboxInput: boolean) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isCheckboxInput || isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport { appendId, mapIds } from './logic/mapIds';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport isKey from './utils/isKey';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...get(\n      fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\n        ? fieldArrayDefaultValues.current\n        : defaultValuesRef.current,\n      name,\n      [],\n    ),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = React.useState(false);\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const isNameKey = isKey(name);\n\n  const getCurrentFieldsValues = () =>\n    watchFieldsRef.current.has(name)\n      ? get(getValues(), name).map(\n          (item: Partial<TFieldArrayValues>, index: number) => ({\n            ...allFields.current[index],\n            ...item,\n          }),\n        )\n      : allFields.current;\n\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | null)[],\n  ) => {\n    if (readFormStateRef.current.isDirty) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields,\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (readFormStateRef.current.dirtyFields) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = prependAt(\n        get(errorsRef.current, name),\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    setFieldAndValidState(removeArrayAt(getCurrentFieldsValues(), index));\n    resetFields(removeArrayAt(get(getValues(), name), index));\n    setIsDeleted(true);\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = removeArrayAt(\n        get(errorsRef.current, name),\n        index,\n      );\n      if (!unique(errorsRef.current[name]).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      insertAt(\n        getCurrentFieldsValues(),\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(get(getValues(), name), index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = insertAt(\n        get(errorsRef.current, name),\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState(fieldValues);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState(fieldValues);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (\n      isNameKey &&\n      isDeleted &&\n      fieldArrayDefaultValues.current[name] &&\n      fields.length < fieldArrayDefaultValues.current[name].length\n    ) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          break;\n        }\n      }\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    isDeleted,\n    isNameKey,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners({\n  field: { ref },\n  handleChange,\n  isRadioOrCheckbox,\n}: {\n  field: Field;\n  isRadioOrCheckbox: boolean;\n  handleChange?: EventListenerOrEventListenerObject;\n}): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\n  control?: Control;\n}): UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","_a","_c","__read","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","map","attributes","isEmptyString","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","name_1","isString","startsWith","find","error","types","message","objectA","objectB","objectAKeys","every","compareObject","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","_b","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_p","validateError","validationResult","_j","__values","_l","validateFunction","validateResult","getPath","getInnerPath","pathWithIndex","isPrimitive","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","transformToNestObject","parentPath","flat","Infinity","forEach","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","substring","indexOf","getIsFieldsDifferent","referenceArray","differenceArray","i","dataA","dataB","isMatchFieldArrayName","searchName","names","some","mode","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","appendId","keyName","generateId","mapIds","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","errorsRef","trigger","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","formState","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","isCheckboxInput","onFocusRef","shouldValidate","skipValidation","commonTask","event","target","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","shouldRender","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getValues","getDefaultValues","getFieldArrayParentName","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","getCurrentFieldsValues","has","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","pop","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","insertAt","reValidateMode","resolver","context","defaultValues","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeChecker","submitCount","isSubmitting","_k","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","selected","includes","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","config","parentFieldName","setInternalValue","isFieldWatched","found","size","shouldSkipValidation","getValue","getFieldsValues","validateResolver","then","forceDelete","handleChange","mutationWatcher","fieldRef","options_1","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldsRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","isEmptyUnmountFields","addEventListener","attachEventListeners","isSelectInput","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","nameRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}